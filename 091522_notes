GAUSSIAN DISTRIBUTION

# Import packages
import matplotlib.pyplot as plt
import numpy as np
import scipy.stats as st

# Let's compare simulated and theoretical Gaussians
mu = 5 # mean
sigma = 10 #stdev
N = 10000

# Get samples
samples = np.random.normal(mu, sigma, N)

# plot histogram for a given number of bins (using trapz to approximate pdf)
nbins = 100
counts, edges = np.histogram(samples, bins=nbins)
xaxis = (edges[1:] + edges[:-1])/2
n_pdf = np.divide(counts, np.trapz(counts, xaxis)) # Here, we're dividing by total number of values i.e. AUC to create probability distribution
plt.bar(xaxis, n_pdf)

# Show theoretical pdf in red
plt.plot(xaxis, st.norm.pdf(xaxis, mu, sigma), 'r-', linewidth=2)

# labels, ets
plt.title(f'Gaussian pdf, mu={mu:.2f}, sigma={sigma:.2f}')
plt.xlabel('Value')
plt.ylabel('Probability')
plt.legend(['Simulated', 'Theoretical'])
plt.show()


BERNOULLI DISTRIBUTION: (p = probability of trial outcome)
Binomial distribution is n repeats of a Bernoulli trial.
The Bernoulli distribution is a discrete probability distribution that describes the probability of obtaining each of just two possible outcomes, 
a "success" with probability p and a "failure" with probability q = 1 â€“ p. A Bernoulli trial describes a single experiment with binary outcomes 
described by a Bernoulli distribution, in which the probabilities of success and failure are fixed. An example of a Bernoulli trial is a coin flip, 
with p = q = 0.5.

The Bernoulli distribution is a special case of the binomial distribution with n = 1. Thus, the probability of obtaining k successes in 1 trial given
a constant probability of success p is:


Code: P(X=k successes) = p^k(1-p)^(1-k), for k ranging from 0 to 1

[1] 
import random as rnd
from scipy.stats import bernoulli

# In Python we can use random, which produces a random variable on the interval 
#   [0,1), which means that all values are greater than or equal to 0 and less 
#   than 1. This function is park of the "random" package imported above as "rnd".
p = 0.7 # choose value for p
single_outcome_method_1 = rnd.random() < p # create logical variable from single pick
print(f"outcome using rand = {single_outcome_method_1}") # print the result

# Or, equivalently, use bernoulli, which is a function in scipy.stats that 
#   generates a random pick from a Bernoulli distribution.
# Choose value for p
p = 0.7  
# Generate a single sample using the rvs ("random variates") method. 
#   To generate >1 sample, use the size argument
single_outcome_method_2 = bernoulli.rvs(p, size=1) 
# Print the output
print(f'outcome using binornd = {bool(single_outcome_method_2)}')

# Now generate lots of Bernoulli trials to check if it is converging on the 
#   appropriate probability
# Choose value for p
p = 0.7  
# Number of Bernoulli trials to simulate
N = 10000
# Use the size argument to generate outcomes (an ndarray) from lot of trials
outcomes = bernoulli.rvs(p, size=N) 
type(outcomes)
print(f'{(outcomes == False).sum()} zeros, {(outcomes == True).sum()} ones, simulated p = {(outcomes == True).sum()/outcomes.size}, empirical p = {p}')

outcome using rand = True
outcome using binornd = True
3075 zeros, 6925 ones, simulated p = 0.6925, empirical p = 0.7


BINOMIAL DISTRIBUTION: (p,n) 
The binomial distribution is a discrete probability distribution that describes the probability of obtaining exactly k successes out of n Bernoulli trials,
which are individual binary outcomes that each have a success probability of p. For example, if you flip a coin 10 times, what is the probability that it 
will come up heads 0, 1, 2, ... 10 times. Think about p(hit) at particular stim strength. You have a sigmoidal curve with error bars on it.

= Probability of obtaining k successes in n trials given a constant probability of success p on each trial, which is defined as
Think about 10 coin flips. 11 possibilities - heads 0,1,2...10 times 

# Import pkgs
import numpy as np
import random as rnd
import collections
import matplotlib.pyplot as plt
import time
import scipy.stats as st

from scipy.stats import bernoulli, binom, poisson, chi2
from IPython.display import clear_output
from operator import itemgetter
from statsmodels.stats import proportion
from numpy import matlib

